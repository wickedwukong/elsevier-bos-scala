Monads are one of the most common abstrac ons in Scala, and one that most Scala programmers are familiar with even
if they don’t know the name.
Informally, a monad is anything with a flatMap method. We have seen a lot of monads Option, List, Either, and Future.
We even have special syntax in Scala to support monads: for comprehensions.
Despite the ubiquity of the concept, Scala lacks a concrete type to encompass “things that can be flatMapped”.

1. Checkout master

* Introduce Monad concept using the Monad trait
* Explain F[_] means:

  F is a type constructor. You can fill in the hole with a type to produce another type.
  e.g List is a type constructor. List[Int] or List[A] is a type

  Show the IOMonad again

2. Introduce Monad law:

  1. Left identity:(pure(a) flatMapf) == f(a)
  2. Right identity:(m flatMap pure)==m
  3. Associativity: (m flatMap f flatMap g) == (m flatMap (x => f(x) flatMap g))

3. Checkout built-in-monad
   Give a few monad examples from the standard scala lib
   Option, List

4. Checkout monad-map-exercise

   Exercise: use pure and flatMap to implement map

5. Checkout monad-map-solution

   show the solution

6. checkout maybe-exercise

   Ask audience to implement the Maybe


7. Checkout out maybe-solution
   Demo the solution and ask audience how to implement the map to make the for comprehension work.
   Use intellij to de-sugar the for comprehension to highlight it is actually flatMap and map.

8. Checkout maybe-for
   Show the audience the implementation of the map to show how the for comprehension works.

9. Checkout popular-monads.

* Explain Scalaz \/ and Cats Xor as monad examples and also show Scala standard Either. Highlights Either is not a monad
  and it is not biased.
* Show Writer monad.

Writer is a monad that lets us carry a log along with a computation. We can use it to record
messages, errors, or additional data about a computation, and extract the log with the final result.

One common use for Writers is logging during multi-threaded computations, where traditional logging can
result in interleaved messages from different contexts. With a Writer the log for the computation on is tied to the result,
so we can run concurrent computation without mixing log messages.

Introduce writer monad then show the writer monad demonstrating it can be used for multi-threaded logging in the advanced-
scala-with-cats project.

* Introduce Reader monad

 Reader is a monad that allows us to compose operations that depend on some input. Instances
 of Reader wrap up functions of one argument, providing us with useful methods for composing them.
 One common use for Readers is injecting configuration. If we have a number of operations that all depend
 on some external configuration, we can chain them together using a Reader. The Reader produces one large
 operation that accepts the configuration on as a parameter and runs everything as specified.
